一、pandas.read_csv
1.pandas.read_csv可以读取CSV（逗号分割）文件、文本类型的文件text、log类型到DataFrame
2.sep：如果不指定参数，则会尝试使用逗号分隔。分隔符长于一个字符并且不是‘\s+’,将使用python的语法分析器。并且忽略数据中的逗号。正则表达式例子：’\r\t’。
example1:
#设定空值作为分隔符，','不会分割每一行的数据
#空值的设定两种方式：' ' or '\s'
a = pd.read_csv('out.log',sep = '\s')
3.delimiter ：定界符，备选分隔符（如果指定该参数，则sep参数失效）
example2:
a = pd.read_csv('out.log',sep = ', ',delimiter='o')
#此时sep = ','设定失效
4.header ：指定行数用来作为列名，数据开始行数。如果文件中没有列名，则默认为0【第一行数据】，否则设置为None。如果明确设定 header = 0 就会替换掉原来存在列名。header参数可以是一个list例如：[0,1,3]，这个list表示将文件中的这些行作为列标题（意味着每一列有多个标题），介于中间的行将被忽略掉。注意：如果skip_blank_lines=True 那么header参数忽略注释行和空行，所以header=0表示第一行数据而不是文件的第一行。
5.index_col ：用作行索引的列编号或者列名，如果给定一个序列则有多个行索引。
6.prefix：在没有列标题时，也就是header设定为None，给列添加前缀。例如：添加prefix= ‘X’ 使得列名称成为 X0, X1, …
7.names ：用于结果的列名列表，如果数据文件中没有列标题行，就需要执行 header=None。names属性在header之前运行默认列表中不能出现重复，除非设定参数mangle_dupe_cols=True。
8.dtype： 每列数据的数据类型。例如 {‘a’: np.float64, ‘b’: np.int32}
9.skiprows ：需要忽略的行数（从文件开始处算起），或需要跳过的行号列表（从0开始）。
10.nrows ：需要读取的行数（从文件头开始算起）。
11.na_values ：一组用于替换NA/NaN的值。如果传参，需要制定特定列的空值。默认为‘1.#IND’, ‘1.#QNAN’, ‘N/A’, ‘NA’, ‘NULL’, ‘NaN’, ‘nan’`.
12.keep_default_na：如果指定na_values参数，并且keep_default_na=False，那么默认的NaN将被覆盖，否则添加
13.na_filter：是否检查丢失值（空字符串或者是空值）。对于大文件来说数据集中没有空值，设定na_filter=False可以提升读取速度。
14.skip_blank_lines ：如果为True，则跳过空行；否则记为NaN。
二、pandas.read_csv-分块读取大文件
1.read_csv中有个参数chunksize，通过指定一个chunksize分块大小来读取文件，返回的是一个可迭代的对象TextFileReader
example1:
reader = pd.read_table('tmp.sv', sep='|', chunksize=4)
for chunk in reader:
	print chunk
2.指定iterator=True 也可以返回一个可迭代对象TextFileReader
example2:
reader = pd.read_table('tmp.sv', sep='|', iterator=True)
reader.get_chunk(5)
3.在次比赛中用户特征数据很大4G多，打开的数据集是个csv文件
chunks = pd.read_csv('train.csv',iterator = True)
chunk = chunks.get_chunk(5)
print chunk